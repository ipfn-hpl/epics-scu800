#######################################################
## vim: sta:et:sw=4:ts=4:sts=4
# ###                                             ### #
# ### EPICS Database for                          ### #
# ### SCU-800 Vacuum Contrller                    ### #
# ###                                             ### #
# ### author: B. Carvalho                         ### #
# ###                                             ### #
# ### Ref 1.0; 2022                               ### #
# ###                                             ### #
# ### macros: BUS     RS232/RS485 BUS name		  ### #
# ### 		  AD      RS485 address of SCU-800    ### #
# ###         CONVST  name of GPIO used as CONVST ### #
# ###         BUSY    name of GPIO used as BUSY   ### #
# ###                                             ### #
# ### Description:                                ### #
# ### This is an example DB file using            ### #
# ### stream(asynI2C) and devgpio to readout an   ### #
# ###                                             ### #
# ### Records ending in "__" are for internal use ### #
# ### only! Do not set them manually              ### #
# ###                                             ### #
#######################################################

#######################################
# ### Read/Write control register ### #
#######################################

################################################
# ### Reads the measured rotational speed  ### #
################################################
record(longin, $(P)$(R)$(A):ReadMeas){
    field(DESC, "Reads the measured rotational speed")
    field(DTYP, "stream")
    field(INP, "@edwards.proto ReadMeas($(A)) RS485")
    #field(PINI, "YES")
    field(VAL, "22")
#    field(SCAN, "2 second")
}
record(longout, $(P)$(R)$(A):SetSpeedSetpoint){
    field(DESC, "Reads the measured rotational speed")
    field( DTYP, "stream" )
    field( OUT,  "@edwards.proto SetSpeedSetpoint($(A)) $(BUS)")
    # Check Pump rpm rates. rated 35000 ~ 584 Hz
    field( DRVH, "584" )
    # half of rated spped
    field( DRVL, "292" )
    field(EGU, "Hz")
}
record(longin, $(P)$(R)$(A):ReadSpeedSetpointSingle){
    field(DESC, "Reads the the Speed Set Point value")
    field( DTYP, "stream" )
  field( INP,  "@edwards.proto ReadSpeedSetpointSingle() $(BUS)" )
  # Check Pump rpm rates
  # half of rated spped
  field(HIGH, "36000")
  field(HIHI, "40000")
  field(VAL, "66")
  field(EGU, "Hz")
#  field(SCAN, "2 second")
}
record(longin, $(P)$(R)$(A):ReadSpeedSetpoint){
    field(DESC, "Reads the the Speed Set Point value")
    field( DTYP, "stream" )
    field( INP,  "@edwards.proto ReadSpeedSetpoint('01') $(BUS)")
  # Check Pump rpm rates
  # half of rated spped
    field(HIGH, "36000")
    field(HIHI, "40000")
    field(VAL, "666")
    field(EGU, "Hz")
    field(SCAN, "2 second")
}
record(longin, $(P)$(R)$(A):ReadSetpointM){
  field(DESC, "Reads Speed SP & TMS temperature")
  field( DTYP, "stream" )
  field( INP,  "@edwards.proto ReadSetpointM('01') $(BUS)" )
  # Check Pump rpm rates
  # half of rated spped
  field(HIGH, "36000")
  field(HIHI, "40001")
  field(VAL, "666")
  field(EGU, "Hz")
#  field(SCAN, "2 second")
}
record(longin, $(P)$(R)$(A):ReadSetpoint){
  field(DESC, "Reads Speed SP & TMS temperature")
  field( DTYP, "stream" )
  field( INP,  "@edwards.proto ReadSetpoint($(A)) $(BUS)" )
  # Check Pump rpm rates
  # half of rated spped
  field(HIGH, "36000")
  field(HIHI, "40000")
  field(VAL, "666")
  field(EGU, "Hz")
#  field(SCAN, "2 second")
}
record(longin, $(P)$(R)$(A):ReadStatus){
  field(DESC, "Reads various setting")
  field(DTYP, "stream" )
  field(INP,  "@edwards.proto ReadStatus('01') $(BUS)" )
  # Check Pump rpm rates
  # half of rated spped
  #field(HIGH, "100")
  #field(HIHI, "110")
  #field(VAL, "1")
  #field(EGU, "C")
  field(SCAN, "2 second")
}
record(longin, $(P)$(R)$(A):ReadMotorTemp){
  field(DESC, "Reads the measured motor temperature")
  field(DTYP, "stream" )
  field(INP,  "@edwards.proto ReadMotorTemp('01') $(BUS)" )
  field(HIGH, "100")
  field(HIHI, "110")
  field(VAL, "1")
  field(EGU, "C")
  field(SCAN, "10 second")
}
record(mbbi, $(P)$(R)$(A):ReadModFonct){
    field(DESC, "Reads the pump operation mode")
    field(DTYP, "stream" )
  field(INP,  "@edwards.proto ReadModFonct('01') $(BUS)" )
  field(ONVL,"1")
  field(ONST,"Levitation")
  field(TWVL,"2")
  field(TWST,"No Levitation")
  field(THVL,"3")
  field(THST,"Acceleration")
  field(FRVL,"4")
  field(FRST,"Normal")
  field(FVVL,"5")
  field(FVST,"Deceleration")
  field(SXVL,"6")
  field(SXST,"Autotest")
  field(SVVL,"7")
  field(SVST,"Tuning")
  field(EIVL,"8")
  field(EIST,"Tuning Complete")
  field(NIVL,"9")
  field(NIST,"Updating control loop S/W")
  field(TEVL,"10")
  field(TEST,"Waiting to Update Driver S/W")
  field(ELVL,"11")
  field(ELST,"Updating Driver S/W")
  field(SCAN, "10 second")
}
record(longin, $(P)$(R)$(A):ReadModFonctNErrors){
    field(DESC, "Reads number of errors being detected")
    field(DTYP, "stream" )
    field(INP,  "@edwards.proto ReadModFonctNErrors('01') $(BUS)" )
    field(VAL, "0")
    field(LOPR, "0")
    field(HOPR, "77")
    field(HIGH, "3")
    field(HIHI, "5")
    field(SCAN, "I/O Intr")
}
record(longin, $(P)$(R)$(A):ReadModFonctError1){
    field(DESC, "Reads first error being detected")
    field(DTYP, "stream" )
    field(INP,  "@edwards.proto ReadModFonctError1('01') $(BUS)" )
    field(VAL, "0")
    field(LOPR, "0")
    field(HOPR, "65")
    field(HIGH, "1")
#    field(HIHI, "5")
    field(SCAN, "I/O Intr")
}
record(longin, $(P)$(R)$(A):ReadModFonctError2){
    field(DESC, "Reads second error being detected")
    field(DTYP, "stream" )
    field(INP,  "@edwards.proto ReadModFonctError2('01') $(BUS)" )
    field(VAL, "0")
    field(LOPR, "0")
    field(HOPR, "65")
    field(HIGH, "1")
#    field(HIHI, "5")
    field(SCAN, "I/O Intr")
}
record(mbbi, $(P)$(R)$(A):ReadModFonctWithWarning){
    field(DESC, "Reads the pump operation mode")
    field(DTYP, "stream" )
    field(INP,  "@edwards.proto ReadModFonctWithWarning('01') $(BUS)" )
    field(ONVL,"1")
    field(ONST,"Levitation")
    field(TWVL,"2")
    field(TWST,"No Levitation")
    field(THVL,"3")
    field(THST,"Acceleration")
    field(FRVL,"4")
    field(FRST,"Normal")
    field(FVVL,"5")
    field(FVST,"Deceleration")
    field(SXVL,"6")
    field(SXST,"Autotest")
    field(SVVL,"7")
    field(SVST,"Tuning")
    field(EIVL,"8")
    field(EIST,"Tuning Complete")
    field(NIVL,"9")
    field(NIST,"Updating control loop S/W")
    field(TEVL,"10")
    field(TEST,"Waiting to Update Driver S/W")
    field(ELVL,"11")
    field(ELST,"Updating Driver S/W")
    field(SCAN, "10 second")
}
record(mbbiDirect, $(P)$(R)$(A):WARNING){
    field(DESC, "Reads WARNING being detected")
    field(DTYP, "stream" )
    field(INP,  "@edwards.proto ReadWarning('01') $(BUS)" )
    field(FLNK, "$(P)$(R)$(A):WARNING:FANOUT1")
}
record(fanout, $(P)$(R)$(A):WARNING:FANOUT1){
    field(DESC, "WARNING PV Fanout")
    field(LNK1, "$(P)$(R)$(A):WARNING:BAD-PUMP-TX")
    field(LNK2, "$(P)$(R)$(A):WARNING:SECOND-DAMGE-LMT")
    field(LNK3, "$(P)$(R)$(A):WARNING:FIRST-DAMGE-LMT")
    field(FLNK, "$(P)$(R)$(A):WARNING:FANOUT2")
}
record(fanout, $(P)$(R)$(A):WARNING:FANOUT2){
    field(DESC, "WARNING PV Fanout")
    field(LNK1, "$(P)$(R)$(A):WARNING:BAD-PUMP-TX")
#    field(LNK1, "$(P)$(R)$(A):WARNING:FANOUT")
    field(FLNK, "$(P)$(R)$(A):WARNING:FANOUT3")
}
record(fanout, $(P)$(R)$(A):WARNING:FANOUT3){
    field(DESC, "WARNING PV Fanout")
#    field(LNK1, "$(P)$(R)$(A):WARNING:FANOUT")
}
record(bi, $(P)$(R)$(A):WARNING:BAD-PUMP-TX){
    field(DESC, "WARNING PV Fanout")
    field(INP, "$(P)$(R)$(A):WARNING:B0 MSS")
    field( ZNAM, "OFF" )
    field( ONAM, "ON" )
    field(OSV,"MINOR")
}
record(bi, $(P)$(R)$(A):WARNING:SECOND-DAMGE-LMT){
    field(DESC, "WARNING: Second Damage Limit")
    field(INP, "$(P)$(R)$(A):WARNING:B1 MSS")
    field( ZNAM, "OFF" )
    field( ONAM, "ON" )
    field(OSV,"MINOR")
}
record(bi, $(P)$(R)$(A):WARNING:FIRST-DAMGE-LMT){
    field(DESC, "WARNING: First Damage Limit")
    field(INP, "$(P)$(R)$(A):WARNING:B2 MSS")
    field( ZNAM, "OFF" )
    field( ONAM, "ON" )
    field(OSV,"MINOR")
}

record(mbbo, $(P)$(R)$(A):Command){
    field( DTYP, "stream" )
    field( OUT,  "@edwards.proto Command($(A)) $(BUS)" )
  # Check Pump rpm rates
  #field( ZRVL, "0" )
    field( ONVL, "1" )
    field( TWVL, "2" )
    field( FRVL, "4" )
    field( ONST, "START" )
    field( TWST, "STOP" )
    field( FRST, "RESET" )
    field(VAL, "0")
  # half of rated spped
}
#######################################
# ### Read/Write control register ### #
#######################################
#record( mbboDirect, "AD7998:$(A):CTRLREGISTER" ) {
#record( longout, "AD7998:$(A):CTRLREGISTER" ) {
#  field( DTYP, "stream" )
#  field( OUT,  "@edwards.proto wCtrl($(A)) $(BUS)" )
#  field( DRVH, "4095" )
#  field( DRVL, "0" )
#field( NOBT, "12" )
#field( SHFT, "0" )
#}
record(stringout, $(P)$(A):generic){
    field(DESC, "Generic")
    field(DTYP, "stream")
    field(OUT, "@edwards.proto debug('01') RS485")
#    field(PINI, "YES")
}
